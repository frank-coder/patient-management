# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Designs/results.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox,QInputDialog,QLineEdit
import sqlite3
from emailer import Emailer

class CustomMessageBox(QMessageBox):

    def __init__(self, *__args):
        QMessageBox.__init__(self)
        self.timeout = 0
        self.autoclose = False
        self.currentTime = 0

    def showEvent(self, QShowEvent):
        self.currentTime = 0
        if self.autoclose:
            self.startTimer(1000)

    def timerEvent(self, *args, **kwargs):
        self.currentTime += 1
        if self.currentTime >= self.timeout:
            self.done(0)

    @staticmethod
    def showWithTimeout(title, message, icon=QMessageBox.Information):
        w = CustomMessageBox()
        w.autoclose = True
        w.timeout = 2
        w.setText(message)
        w.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        w.setWindowTitle(title)
        w.setIcon(icon)
        w.exec_()
class Ui_Results(object):
    def __init__(self):
        #Get admin to login
        self.getAdminDetailsAndLogin()


    def showDialog(self,title,message):     # message box
        msgBox = QMessageBox()
        msgBox.setIcon(QMessageBox.Information)
        msgBox.setText(message)
        msgBox.setWindowTitle(title)
        msgBox.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        msgBox.exec()
        
    def setupUi(self, Results):
        Results.setObjectName("Results")
        Results.setWindowModality(QtCore.Qt.ApplicationModal)
        Results.resize(793, 600)
        self.centralwidget = QtWidgets.QWidget(Results)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(180, 8, 471, 131))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAutoFillBackground(False)
        self.label.setStyleSheet("color:rgb(255, 93, 93)")
        self.label.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.label.setTextFormat(QtCore.Qt.PlainText)
        self.label.setScaledContents(False)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setWordWrap(False)
        self.label.setIndent(-1)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.line = QtWidgets.QFrame(self.verticalLayoutWidget)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout.addWidget(self.line)
        spacerItem = QtWidgets.QSpacerItem(17, 48, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(90, 310, 631, 51))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.label_7 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout.addWidget(self.label_7)
        self.singleSendEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.singleSendEdit.setEnabled(True)
        self.singleSendEdit.setValidator(QtGui.QIntValidator(1,999))#Input mask
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.singleSendEdit.sizePolicy().hasHeightForWidth())
        self.singleSendEdit.setSizePolicy(sizePolicy)
        self.singleSendEdit.setClearButtonEnabled(False)
        self.singleSendEdit.setObjectName("singleSendEdit")
        self.horizontalLayout.addWidget(self.singleSendEdit)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem2)
        self.singleSendBtn = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.singleSendBtn.setStyleSheet("background-color:rgb(255, 137, 250)")
        self.singleSendBtn.setObjectName("singleSendBtn")
        self.horizontalLayout.addWidget(self.singleSendBtn)
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(80, 450, 641, 72))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_3 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_2.addWidget(self.label_3)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem3)
        self.label_6 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_2.addWidget(self.label_6)
        self.sendFrom = QtWidgets.QLineEdit(self.horizontalLayoutWidget_2)
        self.sendFrom.setEnabled(True)
        self.sendFrom.setObjectName("sendFrom")
        self.sendFrom.setValidator(QtGui.QIntValidator(1,999))# Added input Mask
        self.horizontalLayout_2.addWidget(self.sendFrom)
        self.sendTo = QtWidgets.QLineEdit(self.horizontalLayoutWidget_2)
        self.sendTo.setEnabled(True)
        self.sendTo.setObjectName("sendTo")
        self.sendTo.setValidator(QtGui.QIntValidator(1,999)) #Added Input Mask
        self.horizontalLayout_2.addWidget(self.sendTo)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem4)
        self.multipleSendBtn = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.multipleSendBtn.setStyleSheet("background-color:rgb(255, 137, 250)")
        self.multipleSendBtn.setObjectName("multipleSendBtn")
        self.horizontalLayout_2.addWidget(self.multipleSendBtn)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(240, 260, 281, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("color:rgb(255, 93, 93)")
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(150, 390, 481, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("color:rgb(255, 93, 93)")
        self.label_5.setTextFormat(QtCore.Qt.PlainText)
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(100, 200, 611, 41))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_8 = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        self.label_8.setObjectName("label_8")
        self.horizontalLayout_3.addWidget(self.label_8)
        self.adminEmail = QtWidgets.QLineEdit(self.horizontalLayoutWidget_3)
        self.adminEmail.setObjectName("adminEmail")
        self.horizontalLayout_3.addWidget(self.adminEmail)
        #self.adminEmail.displayText(self.adminEmailId) #AdminEmail is Displayed
        self.label_9 = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        self.label_9.setObjectName("label_9")
        self.horizontalLayout_3.addWidget(self.label_9)
        self.adminPass = QtWidgets.QLineEdit(self.horizontalLayoutWidget_3)
        self.adminPass.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.adminPass.sizePolicy().hasHeightForWidth())
        self.adminPass.setSizePolicy(sizePolicy)
        self.adminPass.setClearButtonEnabled(False)
        self.adminPass.setObjectName("adminPass")
        self.horizontalLayout_3.addWidget(self.adminPass)
        self.adminPass.setEchoMode(2) # Echoes input as password text
        #self.adminPass.displayText(self.adminPassword)# Display Admin password on screen
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem5)
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(-10, 240, 811, 21))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(-113, 379, 911, 21))
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        Results.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(Results)
        self.statusbar.setObjectName("statusbar")
        Results.setStatusBar(self.statusbar)

        self.retranslateUi(Results)
        QtCore.QMetaObject.connectSlotsByName(Results)

        self.singleSendBtn.clicked.connect(self.getSingleUser)
        self.multipleSendBtn.clicked.connect(self.getMultipleUser)

    def retranslateUi(self, Results):
        _translate = QtCore.QCoreApplication.translate
        Results.setWindowTitle(_translate("Results", "Results"))
        self.label.setText(_translate("Results", "COVID RESULT PAGE"))
        self.label_2.setText(_translate("Results", "Single patient "))
        self.label_7.setText(_translate("Results", "Choose id"))
        self.singleSendEdit.setPlaceholderText(_translate("Results", "Enter Patient id"))
        self.singleSendBtn.setText(_translate("Results", "Send"))
        self.label_3.setText(_translate("Results", "Multiple Patients "))
        self.label_6.setText(_translate("Results", "Specify range"))
        self.sendFrom.setPlaceholderText(_translate("Results", "From id"))
        self.sendTo.setPlaceholderText(_translate("Results", "To id"))
        self.multipleSendBtn.setText(_translate("Results", "Send"))
        self.label_4.setText(_translate("Results", "Send result to single patient"))
        self.label_5.setText(_translate("Results", "Sent result to multiple patients for a specific range"))
        self.label_8.setText(_translate("Results", "Hospital/Senders email* "))
        self.adminEmail.setPlaceholderText(_translate("Results", f"{self.adminEmailId}"))
        self.label_9.setText(_translate("Results", "Password* "))
        self.adminPass.setPlaceholderText(_translate("Results", "********"))

    ##Initialise emailer
    def getAdminDetailsAndLogin(self):
        db = sqlite3.connect('hospital_data.db')
        curs = db.cursor()
        curs.execute("SELECT Email, Password from [NCDC EMAIL]")
        rows = curs.fetchall()
        for row in rows:
            self.adminEmailId = row[0]
            print(self.adminEmailId)
            self.adminPassword = row[1]
            print(self.adminPassword)

        try:
                self.emailLogin = Emailer(self.adminEmailId,self.adminPassword)

        except Exception as e:
            self.showDialog('ERROR','Could not login to admin Email')

    def getMultipleUser(self):
        self.start = int(self.sendFrom.text())
        self.end = int(self.sendTo.text())
        if self.start <= self.end:
            pass
        else:
            self.showDialog("ERROR","The From field must be lesser than TO")
            self.sendFrom.setFocus()


        try:
            
            #connect to database
            db = sqlite3.connect('hospital_data.db')
            curs = db.cursor()
            for id in range(self.start,self.end):

                curs.execute(f'Select [First Name], [Mail Id], Result from data where ID=="{id}"')
                rows = curs.fetchall()
                if len(rows)==0:
                    self.showDialog('ERROR','No such patient exists!!!','Critical')
                else:
                    for row in rows:
                        self.name = row[0]
                        self.userEmail = row[1]
                        self.result = row[2]
                        print(self.name,self.userEmail,self.result)
                        self.send_func()
            self.showDialog("INFO","Done!")

        except Exception as e:
            print(e)
    def getSingleUser(self):
        if self.singleSendEdit.hasAcceptableInput():
            self.getId = self.singleSendEdit.text()
            print(self.getId)
            #connect to database
            db = sqlite3.connect('hospital_data.db')
            curs = db.cursor()
            curs.execute(f'Select [First Name], [Mail Id], Result from data where ID=="{self.getId}"')
            rows = curs.fetchall()
            if len(rows)==0:
                self.showDialog('ERROR','No such patient exists!!!','Critical')
            else:
                for row in rows:
                    self.name = row[0]
                    self.userEmail = row[1]
                    self.result = row[2]
                    print(self.name,self.userEmail,self.result)
                    self.send_func()
        else:
            self.showDialog("Ids can only be numbers!.....Try again")
        
    def send_func(self):
        self.positive = f"""\
                <html>
                <body>
                    <h3>Hello! {self.name}</h3><br>
                    <p>How are you?<br>
                    Your test results are out and we are sorry they came out <strong>{self.result}</strong><br>
                    Please you are adviced to take the neccesary precautions for your safety and that of you loved ones<br>
                    Safely quarantine yourself and inform the right authorities so that you can be taken care of.
                    <br>
                    <br>
                    <a href="https://covid19.ncdc.gov.ng/guideline/">Visit NCDC Website for guides on how to proceed.</a> 
                    </p>
                </body>
                </html>
                """
        self.negative = f"""\
                <html>
                <body>
                    <h3>Hello! {self.name}</h3><br>
                    <p>How are you?<br>
                    Your test results are out and thankfully its <strong>{self.result}</strong><br>
                    Please you are adviced to take the neccesary precautions for your safety and that of you loved ones<br>
                    Keep on doing the right things: <strong> Wear masks, sanitise, Social Distance<strong>
                    <br>
                    <br>
                    <a href="https://covid19.ncdc.gov.ng/guideline/">Visit NCDC Website for guides on how to proceed.</a> 
                    </p>
                </body>
                </html>
                """

        
        try:
            if self.result == "Negative":
                self.emailLogin.send(self.userEmail,self.negative)
                #self.showDialog("SUCCESS",f"Email sent Successfully to {self.name}!")
                CustomMessageBox.showWithTimeout("Success",f"Email sent successfully to {self.name}!")
            elif self.result == "Positive":
                self.emailLogin.send(self.userEmail,self.positive)
                CustomMessageBox.showWithTimeout("Success",f"Email sent successfully to {self.name}!")
            else:
                self.showDialog("Error", 'Test result must be either Positive or Negative!')
        except Exception as e:
            self.showDialog("ERROR",f"Could not send email to {self.name}")
            





if __name__ == "__main__":
    import sys 
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_Results()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())